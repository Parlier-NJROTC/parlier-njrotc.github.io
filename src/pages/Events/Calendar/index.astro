---
import Layout from "../../../layouts/GlobalHTMLLayout.astro";
---

<Layout name="Calendar">
 
<div class="calendar">
    <div class="header">
        <button class="nav-button" id="prev-month">← Previous</button>
        <h2 id="current-month"></h2>
        <button class="nav-button" id="next-month">Next →</button>
    </div>
    <div class="calendar-container">
        <div class="calendar-grid" id="calendar-grid"></div>
    </div>
</div>

<div id="event-dialog" class="event-dialog">
    <div class="event-dialog-content">
        <span class="close-dialog">&times;</span>
        <h3 id="dialog-date"></h3>
        <div id="dialog-events"></div>
    </div>
</div>

<style is:inline>
  h2,
  #dialog-date,
  .dialog-event-item{
    color: var(--Text-color);
  }

  .calendar {
      background: var(--body-color);
      max-width: 800px;
      margin: 50px auto;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
      touch-action: pan-y;
      overflow: hidden;
      position: relative;
  }

  .calendar-container {
      position: relative;
      overflow: hidden;
  }

  .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
  }

  .nav-button {
      background: navy;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
  }

  .nav-button:hover {
      background: #000090;
  }

  .calendar-grid {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      gap: 5px;
      transition: transform 0.3s ease-out;
  }

  .day-header {
      padding: 10px;
      text-align: center;
      background: #f8f9fa;
      font-weight: bold;
      color: #000;
  }

  .calendar-cell {
      padding: 10px;
      min-height: 100px;
      border: 1px solid #dee2e6;
      background: white;
      position: relative; 
      color: #000;
      cursor: pointer;
  }
  .calendar-cell * {
      color: #000;
  }

  .calendar-cell:hover {
      background: #f8f9fa;
  }

  .date-number {
      position: absolute;
      top: 5px;
      right: 5px;
      font-weight: bold;
  }

  .event {
      background: navy;
      color: white;
      padding: 2px 5px;
      border-radius: 3px;
      margin-top: 20px;
      font-size: 0.8em;
      cursor: pointer;
  }

  .event:hover {
      background: #0056b3;
  }

  .current-date {
      background-color: #e3f2fd;
  }

  .event-notification {
      position: absolute;
      top: 5px;
      left: 5px;
      width: 18px;
      height: 18px;
      background-color: navy;
      border-radius: 50%;
      display: none;
      justify-content: center;
      align-items: center;
      color: white;
      font-size: 10px;
      font-weight: bold;
      animation: pulse 2s infinite;
      cursor: pointer;
  }

  @keyframes pulse {
      0% { transform: scale(0.95); box-shadow: 0 0 0 0 rgba(0, 0, 128, 0.7); }
      70% { transform: scale(1.1); box-shadow: 0 0 0 5px rgba(0, 0, 128, 0); }
      100% { transform: scale(0.95); box-shadow: 0 0 0 0 rgba(0, 0, 128, 0); }
  }

  .event-dialog {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.4);
  }

  .event-dialog-content {
      background-color: var(--body-color);
      margin: 15% auto;
      padding: 20px;
      border-radius: 10px;
      width: 80%;
      max-width: 400px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
  }

  .close-dialog {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
      transition: ease 0.3s;
  }

  .close-dialog:hover {
      color: black;
      animation: infinite scarid 300ms ease-in-out;
  }

  .dialog-event-item {
      padding: 8px 0;
  }

  .slide-out-left {
      animation: slideOutLeft 0.3s forwards;
  }

  .slide-out-right {
      animation: slideOutRight 0.3s forwards;
  }

  .slide-in-left {
      animation: slideInLeft 0.3s forwards;
  }

  .slide-in-right {
      animation: slideInRight 0.3s forwards;
  }

  @keyframes slideOutLeft {
      to {
          transform: translateX(-100%);
          opacity: 0;
      }
  }

  @keyframes slideOutRight {
      to {
          transform: translateX(100%);
          opacity: 0;
      }
  }

  @keyframes slideInLeft {
      from {
          transform: translateX(-100%);
          opacity: 0;
      }
      to {
          transform: translateX(0);
          opacity: 1;
      }
  }

  @keyframes slideInRight {
      from {
          transform: translateX(100%);
          opacity: 0;
      }
      to {
          transform: translateX(0);
          opacity: 1;
      }
  }

  @media (orientation: portrait) {
      .calendar {
          margin: 20px auto;
          padding: 5px;
          width: 95%;
      }
      
      .header {
          gap: 10px;
      }
      
      .nav-button {
          padding: 8px 15px;
          font-size: 0.9em;
      }
      
      .calendar-cell {
          min-height: 60px;
          padding: 5px;
          font-size: 0.8em;
      }
      
      .date-number {
          font-size: 0.9em;
      }
      
      .event {
          display: none;
      }
      
      .event-notification {
          display: flex;
      }
      
      #current-month {
          font-size: 1.2em;
          text-align: center;
      }
      
      .event-dialog-content {
          margin: 80% auto;
      }
  }

  @media (orientation: landscape) {
      .event-notification {
          display: none;
      }
      
      .event {
          display: block;
      }
  }
</style>

<script lang="js">
let currentDate = new Date();
let currentMonth = currentDate.getMonth();
let currentYear = currentDate.getFullYear();
const monthNames = ["January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"];
const dayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

let touchStartX = 0;
let touchEndX = 0;
let isSwiping = false;
const SWIPE_THRESHOLD = 50; // Minimum distance to consider it a swipe

function handleOrientationChange() {
    generateCalendar(currentMonth, currentYear);
}

function initOrientation() {
    const mediaQuery = window.matchMedia("(orientation: portrait)");
    mediaQuery.addEventListener('change', handleOrientationChange);
    handleOrientationChange();
    
    const calendarGrid = document.getElementById('calendar-grid');
    calendarGrid.addEventListener('touchstart', handleTouchStart, { passive: false });
    calendarGrid.addEventListener('touchmove', handleTouchMove, { passive: false });
    calendarGrid.addEventListener('touchend', handleTouchEnd, { passive: false });
}

function handleTouchStart(e) {
    touchStartX = e.touches[0].clientX;
    isSwiping = false;
}

function handleTouchMove(e) {
    if (!isSwiping) {
        const xDiff = Math.abs(e.touches[0].clientX - touchStartX);
        if (xDiff > 10) { 
            isSwiping = true;
        }
    }
    
    if (isSwiping) {
        e.preventDefault();
        const currentX = e.touches[0].clientX;
        const diff = currentX - touchStartX;
        document.getElementById('calendar-grid').style.transform = `translateX(${diff}px)`;
    }
}

function handleTouchEnd(e) {
    touchEndX = e.changedTouches[0].clientX;
    const calendarGrid = document.getElementById('calendar-grid');
    
    calendarGrid.style.transform = 'translateX(0)';
    
    if (isSwiping) {
        handleSwipeGesture();
    }
    isSwiping = false;
}

function handleSwipeGesture() {
    const diff = touchEndX - touchStartX;
    if (Math.abs(diff) < SWIPE_THRESHOLD) return;
    
    const calendarGrid = document.getElementById('calendar-grid');
    
    if (diff < 0) {
        calendarGrid.classList.add('slide-out-left');
        setTimeout(() => {
            calendarGrid.classList.remove('slide-out-left');
            navigateMonth(1);
            calendarGrid.classList.add('slide-in-right');
            setTimeout(() => {
                calendarGrid.classList.remove('slide-in-right');
            }, 300);
        }, 300);
    } else {
        calendarGrid.classList.add('slide-out-right');
        setTimeout(() => {
            calendarGrid.classList.remove('slide-out-right');
            navigateMonth(-1);
            calendarGrid.classList.add('slide-in-left');
            setTimeout(() => {
                calendarGrid.classList.remove('slide-in-left');
            }, 300);
        }, 300);
    }
}

function navigateMonth(direction) {
    currentMonth += direction;
    if (currentMonth < 0) {
        currentMonth = 11;
        currentYear--;
    } else if (currentMonth > 11) {
        currentMonth = 0;
        currentYear++;
    }
    generateCalendar(currentMonth, currentYear);
}

function showEventDialog(date, events) {
    if (events.length === 0) return;
    
    const dialog = document.getElementById('event-dialog');
    const dialogDate = document.getElementById('dialog-date');
    const dialogEvents = document.getElementById('dialog-events');
    
    dialogDate.textContent = formatDialogDate(date);
    dialogEvents.innerHTML = '';
    
    events.forEach(event => {
        const eventElement = document.createElement('div');
        eventElement.className = 'dialog-event-item';
        eventElement.textContent = event;
        dialogEvents.appendChild(eventElement);
    });
    
    dialog.style.display = 'block';
}

function formatDialogDate(dateStr) {
    const [year, month, day] = dateStr.split('-');
    const date = new Date(year, month-1, day);
    return date.toLocaleDateString('en-US', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
    });
}

document.querySelector('.close-dialog').addEventListener('click', () => {
    document.getElementById('event-dialog').style.display = 'none';
});

window.addEventListener('click', (event) => {
    const dialog = document.getElementById('event-dialog');
    if (event.target === dialog) {
        dialog.style.display = 'none';
    }
});

const events = {
  '2025-1-1': ['New Year’s Day'],
  '2025-1-20': ['Martin Luther King Jr. Day'],
  '2025-2-10': ['Lincoln’s Birthday'], 
  '2025-2-14': ['Valentine’s Day'],
  '2025-2-17': ['Presidents’ Day'],
  '2025-3-17': ['St. Patrick’s Day'],
  '2025-4-5': ['Cadet Ball'],
  '2025-4-11': ['PHS Prom'],
  '2025-4-14': ['Spring Break'],
  '2025-4-15': ['Spring Break'],
  '2025-4-16': ['Spring Break'],
  '2025-4-17': ['Spring Break', 'Local Holiday'],
  '2025-4-18': ['Spring Break'],
  '2025-4-21': ['Spring Break'],
  '2025-4-22': ['Earth Day'],
  '2025-4-23': ['Parlier Round Up', 'Parade Kick Off'],
  '2025-4-24': ['UCLA'],
  '2025-4-25': ['ASB CAASPP Rally Kick Off', 'Arbor Day', 'USS Boxer'],
  '2025-5-1': ['May Day', 'National Day of Prayer'],
  '2025-5-5': ['Cinco de Mayo'],
  '2025-5-6': ['National Teacher Day'],
  '2025-5-11': ['Mother’s Day'],
  '2025-5-23': ['Awards Night'],
  '2025-5-24': ['Senior Grad. Night', 'Senior Last Day'],
  '2025-5-25': ['Senior Sunset/ Senior Checkout'],
  '2025-5-26': ['Memorial Day'],
  '2025-6-5': ['Last Day of School'],
  '2025-6-6': ['Summer Break'],
  '2025-6-15': ['Father’s Day'],
  '2025-6-19': ['Juneteenth'],
  '2025-7-4': ['Independence Day', 'Summer Break'],
  '2025-7-20': ['Moon Landing Anniversary'],
  '2025-8-4': ['National Coast Guard Day'],
  '2025-8-13': ['First Day of School'],
  '2025-8-19': ['World Humanitarian Day'],
  '2025-9-1': ['Labor Day'],
  '2025-9-6': ['National Read a Book Day'],
  '2025-9-8': ['First Day of School'],
  '2025-9-17': ['Constitution Day'],
  '2025-10-13': ['Columbus Day', 'U.S. Navy Birthday'],
  '2025-10-16': ['Boss’s Day'],
  '2025-10-24': ['United Nations Day'],
  '2025-11-11': ['Veterans Day'],
  '2025-11-24': ['Thanksgiving Break'],
  '2025-11-25': ['Thanksgiving Break'],
  '2025-11-26': ['Thanksgiving Break'],
  '2025-11-27': ['Thanksgiving Day', 'Thanksgiving Break'],
  '2025-11-28': ['Black Friday', 'Small Business Saturday', 'Thanksgiving Break'],
  '2025-12-24': ['Christmas Eve'],
  '2025-12-25': ['Christmas Day'],
  '2025-12-31': ['New Year’s Eve'],
  '2026-1-1': ['New Year’s Day'],
  '2026-2-2': ['Groundhog Day'],
  '2026-2-9': ['Parlier NJROTC Websites 2nd Birthday!'],
  '2026-2-14': ['Valentine’s Day'],
  '2026-2-17': ['Presidents’ Day'],
  '2026-3-17': ['St. Patrick’s Day'],
  '2026-4-22': ['Earth Day'],
  '2026-5-10': ['Mother’s Day'],
  '2026-5-25': ['Memorial Day'],
  '2026-6-14': ['Flag Day'],
  '2026-6-21': ['Father’s Day'],
};

function generateCalendar(month, year) {
    const firstDay = new Date(year, month, 1);
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const startingDay = firstDay.getDay();
    const isPortrait = window.matchMedia("(orientation: portrait)").matches;

    document.getElementById('current-month').textContent = 
        `${monthNames[month]} ${year}`;

    const calendarGrid = document.getElementById('calendar-grid');
    calendarGrid.innerHTML = '';

    dayNames.forEach(day => {
        const dayElement = document.createElement('div');
        dayElement.className = 'day-header';
        dayElement.textContent = isPortrait ? day.substring(0, 1) : day;
        calendarGrid.appendChild(dayElement);
    });

    for (let i = 0; i < startingDay; i++) {
        calendarGrid.appendChild(createCell(''));
    }

    for (let day = 1; day <= daysInMonth; day++) {
        const dateKey = `${year}-${month + 1}-${day}`;
        const cellEvents = events[dateKey] || [];
        const isCurrentDate = day === currentDate.getDate() && 
                            month === currentDate.getMonth() && 
                            year === currentDate.getFullYear();

        const cell = createCell(day, dateKey, cellEvents);
        if (isCurrentDate) {
            cell.classList.add('current-date');
        }

        if (cellEvents.length > 0 && isPortrait) {
            const notificationDot = document.createElement('div');
            notificationDot.className = 'event-notification';
            notificationDot.textContent = cellEvents.length;
            cell.appendChild(notificationDot);
        }

        if (!isPortrait) {
            const eventContainer = document.createElement('div');
            cellEvents.forEach(event => {
                const eventElement = document.createElement('div');
                eventElement.className = 'event';
                eventElement.textContent = event;
                eventContainer.appendChild(eventElement);
            });
            cell.appendChild(eventContainer);
        }

        calendarGrid.appendChild(cell);
    }
}

function createCell(day, dateKey = '', cellEvents = []) {
    const cell = document.createElement('div');
    cell.className = 'calendar-cell';
    if (day) {
        const dateNumber = document.createElement('div');
        dateNumber.className = 'date-number';
        dateNumber.textContent = day;
        cell.appendChild(dateNumber);

        cell.addEventListener('click', () => {
            if (cellEvents.length > 0) {
                showEventDialog(dateKey, cellEvents);
            }
        });
    }
    return cell;
}

document.getElementById('prev-month').addEventListener('click', () => {
    const calendarGrid = document.getElementById('calendar-grid');
    calendarGrid.classList.add('slide-out-right');
    setTimeout(() => {
        calendarGrid.classList.remove('slide-out-right');
        navigateMonth(-1);
        calendarGrid.classList.add('slide-in-left');
        setTimeout(() => {
            calendarGrid.classList.remove('slide-in-left');
        }, 300);
    }, 300);
});

document.getElementById('next-month').addEventListener('click', () => {
    const calendarGrid = document.getElementById('calendar-grid');
    calendarGrid.classList.add('slide-out-left');
    setTimeout(() => {
        calendarGrid.classList.remove('slide-out-left');
        navigateMonth(1);
        calendarGrid.classList.add('slide-in-right');
        setTimeout(() => {
            calendarGrid.classList.remove('slide-in-right');
        }, 300);
    }, 300);
});

window.addEventListener('DOMContentLoaded', () => {
    initOrientation();
    generateCalendar(currentMonth, currentYear);
});
</script>