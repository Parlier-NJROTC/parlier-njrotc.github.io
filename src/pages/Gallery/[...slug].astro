---

import Layout from '../../layouts/GlobalHTMLLayout.astro';
import Top from '../../components/Sections/Top.astro';
import ControlBar from "../../components/ControlBar/ControlBar.svelte"
import data from '../../data/gallery.json'

// but look, this is cool
// makes all the gallery pages, 
export async function getStaticPaths() {
  const pages = data
  return pages.map(({ slug, page, images }) => {
    return {
        // for some reason it has to be named slug. 
        // don't complain to me, complain here: https://docs.astro.build/en/guides/routing/#dynamic-routes
        // -Saul but it sounds like a ammo
      params: { slug }, 
      props: { page, images },
    };
  });
}

const { page, images } = Astro.props;





---
<Layout name=`Gallery ${page}`>
    <Top image="https://raw.githubusercontent.com/Parlier-NJROTC/Gallery/main/teaching.jpeg">
        <h1><u>Photo Gallery</u></h1>
        <div style="background-color: var(--backgroundColor);color:var(--Text-color); padding-inline: 5vw; padding-block:10px;" id="quote">
           
        </div>
    </Top>
    <main id="photos">
        
    </main>
    <dialog id="showPhoto">
        <object id="mainPhoto"></object>
        <form method="dialog">
            <button id="closeBtn" style="position: absolute;top: 0;left: 0.5px;">X</button>
        </form>
    </dialog>
    <ControlBar></ControlBar>
</Layout>
<script define:vars={{images}}>


    let p = document.getElementById("photos")
    for(let i=0;i<images.length;i++){
        let img = document.createElement("img")
        img.src = `https://lh3.googleusercontent.com/d/${images[i]}=h280`
        img.className = "Gallery-Image"
        img.decoding = "async"
        img.loading = "lazy"

        img.onclick = ()=>{

            let display = document.getElementById("showPhoto")
            display.showModal()
            document.getElementById("mainPhoto").data = `https://drive.google.com/file/d/${images[i]}/preview`
            
        }
        
        p.appendChild(img)
        
    }
    

</script>

<script define:vars={{data}}>

    let quotes = [
        `“The best thing about a picture is that it never changes, even when the people in it do.” - Andy Warhol`,
        `Pictures!`,
        `"Nothing is pleasanter than exploring a library." - Walter Savage Landor `,
        `"The only thing that you absolutely have to know, is the location of the library." - Albert Einstein`,
        `The internet! Biggest library and gallery of cat photos`,
        `Where is the photo?`,
        `If we tried fitting this in a book, it would be about as tall as a wedding cake.`,
        `It's 30 images per page`,
        `Some of the Photos here was Found by Stalking Chief instagram`,
        `Photos Maybe be Dots on a Screen but they contain the Past....I Think`,
        `Wow that very Cool! How do you do that!`,
        `We Are Supposed to add 1200+ Photos! That sounds Fun Right?`,
        `It takes 30 min to fully download All the Photos and We are Supposed to add them!`
        ]
    document.getElementById("quote").innerText = quotes[Math.floor(Math.random()*quotes.length)]
    


    for(let i=0;i<data.length;i++){
        let button = document.createElement("a")
        button.innerText = data[i].page
        button.href = `/Gallery/Page-${data[i].page}`
        button.className = "navBtn"
        
        // I could have applied a class, but that doesn't work in astro
        // Astro isolates styles, elements made in js arn't part of that isolation
        // So even if I where to apply the class name, it won't work
        button.style.fontFamily = 'Times'
        button.style.backgroundColor = "rgb(0, 0, 151)"
        button.style.borderRadius = "5px"
        button.style.textDecoration = "None"

        button.style.display = "flex"
        button.style.justifyContent = "center"
        button.style.alignItems = "center"


        document.getElementById("navBar").appendChild(button)
    }
</script>

<style is:global>
    :root{
    --align:center;
}
    .Gallery-Image{
        height: 280px;
        border-radius: 5px;
        transition: 250ms;
    }
    .Gallery-Image:hover{
        height: 290px;
    }
</style>

<style>
    #closeBtn{
        display: flex;
        align-items: center;
        justify-content: center;

        box-shadow: 0 0 1rem #0003;
        background-color: #ffffff26;
        backdrop-filter: blur(5px);
        border: solid 2px #ffffff26;

        color: whitesmoke;

        border-radius: 5px;
        width: 25px;

        font-weight: 600;

        transition: ease 1s;
    }
    #closeBtn:hover{
        border-radius: 10px;

        color: #000000b0;
    }
   
    #photos{
        display: flex;
        flex-wrap: wrap;
        position: relative;
        transition: 250ms;
        
        gap: 0.5rem;
        justify-content: center;
        padding-block: 50px;
        
        background: var(--body-color);
    }
    
    .navBtn{
        font-family: 'Times New Roman', Times, serif;
        text-decoration: none;
        background-color: rgb(0, 0, 151);
        border-radius: 5px;
        padding-inline: 20px;

        display: flex;
        justify-content: center;
        align-items: center;

        
    }
    #mainPhoto{
        height: 56.25vmin;
        width: 100vmin;
        border-radius: 5px;
    }

    #navBar{
        display: grid;
        grid-auto-flow: column;
        grid-template-columns: 50px;
        grid-auto-columns: 40px;
        grid-auto-rows: 35px;
        column-gap: 10px;

        align-items: stretch;
        justify-items: stretch;

        padding: 10px;
        border-block: 10px double black;
    }
    /* Adds a Backgroud to the Image :O */
    dialog::backdrop {
        background-color: black;
        opacity: 70%;
    }
    dialog{
        border-radius: 5px;

        color: whitesmoke;

        box-shadow: 0 0 1rem #0003;
        background-color: #ffffff26;
        backdrop-filter: blur(5px);
        border: solid 2px #ffffff26;
    }
</style>